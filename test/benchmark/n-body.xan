var PI = 3.141592653589793;
var SOLAR_MASS = 4 * PI * PI;
var DAYS_PER_YEAR = 365.24;

class Body {
	init(x, y, z, vx, vy, vz, mass) {
		this.x = x;
		this.y = y;
		this.z = z;

		this.vx = vx;
		this.vy = vy;
		this.vz = vz;

		this.mass = mass;
	}

	offsetMomentum(px, py, pz) {
		this.vx = -px / SOLAR_MASS;
		this.vy = -py / SOLAR_MASS;
		this.vz = -pz / SOLAR_MASS;
	}
}

class NBodySystem {
	init() {
		this.bodies = Array(5);
		this.bodies[0] = Body(0,0,0,0,0,0,SOLAR_MASS);	// Sun
		this.bodies[1] = Body(	// Jupiter
			4.84143144246472090,
			-1.16032004402742839,
      		-0.103622044471123109,
      		0.00166007664274403694 * DAYS_PER_YEAR,
      		0.00769901118419740425 * DAYS_PER_YEAR,
      		-0.0000690460016972063023 * DAYS_PER_YEAR,
      		0.000954791938424326609 * SOLAR_MASS
		);

		this.bodies[2] = Body(	// Saturn
			8.34336671824457987,
			4.12479856412430479,
			-0.403523417114321381,
			-0.00276742510726862411 * DAYS_PER_YEAR,
			0.00499852801234917238 * DAYS_PER_YEAR,
			0.0000230417297573763929 * DAYS_PER_YEAR,
			0.000285885980666130812 * SOLAR_MASS
		);

		this.bodies[3] = Body(	// Uranus
			12.8943695621391310,
			-15.1111514016986312,
			-0.223307578892655734,
			0.00296460137564761618 * DAYS_PER_YEAR,
			0.00237847173959480950 * DAYS_PER_YEAR,
			-0.0000296589568540237556 * DAYS_PER_YEAR,
			0.0000436624404335156298 * SOLAR_MASS
		);

		this.bodies[4] = Body(	//Neptune
			15.3796971148509165,
			-25.9193146099879641,
			0.179258772950371181,
			0.00268067772490389322 * DAYS_PER_YEAR,
			0.00162824170038242295 * DAYS_PER_YEAR,
			-0.0000951592254519715870 * DAYS_PER_YEAR,
			0.0000515138902046611451 * SOLAR_MASS
		);

		var px = 0.0;
		var py = 0.0;
		var pz = 0.0;
		for(var i = 0; i < this.bodies.count(); i = i + 1) {
			px = px + this.bodies[i].vx * this.bodies[i].mass;
			py = py + this.bodies[i].vy * this.bodies[i].mass;
			pz = pz + this.bodies[i].vz * this.bodies[i].mass;
		}
		this.bodies[0].offsetMomentum(px, py, pz);
	}

	advance(dt) {
		for(var i = 0; i < this.bodies.count(); i = i + 1) {
			for(var j = i + 1; j < this.bodies.count(); j = j + 1) {
				var dx = this.bodies[i].x - this.bodies[j].x;
				var dy = this.bodies[i].y - this.bodies[j].y;
				var dz = this.bodies[i].z - this.bodies[j].z;

				var distance = sqrt(dx * dx + dy * dy + dz * dz);
				var mag = dt / (distance * distance * distance);

				this.bodies[i].vx = this.bodies[i].vx - dx * this.bodies[j].mass * mag;
				this.bodies[i].vy = this.bodies[i].vy - dy * this.bodies[j].mass * mag;
				this.bodies[i].vz = this.bodies[i].vz - dz * this.bodies[j].mass * mag;

				this.bodies[j].vx = this.bodies[j].vx + dx * this.bodies[i].mass * mag;
				this.bodies[j].vy = this.bodies[j].vy + dy * this.bodies[i].mass * mag;
				this.bodies[j].vz = this.bodies[j].vz + dz * this.bodies[i].mass * mag;
			}
		}

		for(var i = 0; i < this.bodies.count(); i = i + 1) {
			this.bodies[i].x = this.bodies[i].x + dt * this.bodies[i].vx;
			this.bodies[i].y = this.bodies[i].y + dt * this.bodies[i].vy;
			this.bodies[i].z = this.bodies[i].z + dt * this.bodies[i].vz;
		}
	}

	energy() {
		var e = 0.0;

		for(var i = 0; i < this.bodies.count(); i = i + 1) {
			e = e + 0.5 * this.bodies[i].mass * (
				this.bodies[i].vx * this.bodies[i].vx +
				this.bodies[i].vy * this.bodies[i].vy +
				this.bodies[i].vz * this.bodies[i].vz
			);
			for(var j = i + 1; j < this.bodies.count(); j = j + 1) {
				var dx = this.bodies[i].x - this.bodies[j].x;
				var dy = this.bodies[i].y - this.bodies[j].y;
				var dz = this.bodies[i].z - this.bodies[j].z;

				var distance = sqrt(dx * dx + dy * dy + dz * dz);
				e = e - (this.bodies[i].mass * this.bodies[j].mass) / distance;
			}
		}

		return e;
	}
}

var start = clock();
var bodies = NBodySystem();
print(bodies.energy());		// expect -0.169075

for(var i = 0; i < 500000; i = i + 1)
	bodies.advance(0.01);
print(bodies.energy());		// expect -0.169078
print(clock() - start);

// for 50000: -0.169078
// for 500000: -0.169097
// for 5000000: -0.169083134
// for 50000000: -0.169059907
